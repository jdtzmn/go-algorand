// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"87pduPp89f8DAAD//6ICHPrSsgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
