// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
